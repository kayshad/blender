import bpy
import math
import mathutils

D = bpy.data




def vect(vec):
    
    # COLLECTION
    Koll = D.collections.new('chvect')
    source_collection = D.collections.new('vect')
    Koll.children.link(source_collection)
    D.scenes["Scene"].collection.children.link(Koll)    
    orig = D.objects.new('orig', None)
    source_collection.objects.link(orig)
    # MESH
    vertices = [(-0.19999997317790985, 0.07000000029802322, -1.5099578476451825e-08), (-0.19999997317790985, 0.06467156857252121, -0.026787856593728065), (-0.19999997317790985, 0.04949747398495674, -0.049497488886117935), (-0.19999997317790985, 0.026787839829921722, -0.0646715834736824), (-0.19999997317790985, -3.059797082372029e-09, -0.07000001519918442), (-0.19999997317790985, -0.02678784541785717, -0.0646715834736824), (-0.19999997317790985, -0.04949747398495674, -0.049497488886117935), (-0.19999997317790985, -0.06467156857252121, -0.026787858456373215), (-0.19999997317790985, -0.07000000029802322, -2.5669283587603786e-08), (-0.19999997317790985, -0.0646715760231018, 0.026787810027599335), (-0.19999997317790985, -0.049497488886117935, 0.04949744790792465), (-0.19999997317790985, -0.026787851005792618, 0.06467155367136002), (-0.19999997317790985, 8.347416646792283e-10, 0.06999998539686203), (-0.19999997317790985, 0.026787852868437767, 0.06467154622077942), (-0.19999997317790985, 0.049497488886117935, 0.049497444182634354), (-0.19999997317790985, 0.0646715834736824, 0.02678779326379299), (0.0, 0.0, 0.0)]
    edges = [[0, 1], [0, 16], [16, 1], [1, 2], [16, 2], [2, 3], [16, 3], [3, 4], [16, 4], [4, 5], [16, 5], [5, 6], [16, 6], [6, 7], [16, 7], [7, 8], [16, 8], [8, 9], [16, 9], [9, 10], [16, 10], [10, 11], [16, 11], [11, 12], [16, 12], [12, 13], [16, 13], [13, 14], [16, 14], [14, 15], [16, 15], [15, 0]]
    faces = [[0, 16, 1], [1, 16, 2], [2, 16, 3], [3, 16, 4], [4, 16, 5], [5, 16, 6], [6, 16, 7], [7, 16, 8], [8, 16, 9], [9, 16, 10], [10, 16, 11], [11, 16, 12], [12, 16, 13], [13, 16, 14], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], [14, 16, 15], [15, 16, 0]]
    flechm = bpy.data.meshes.new('flecm')
    flechm.from_pydata(vertices, edges, faces)
    flechm.update()
    flech = bpy.data.objects.new(name='flech', object_data=flechm)
    source_collection.objects.link(flech)
    # position
    flech.location = (0.0, 0.0, 1.0)
    flech.rotation_euler = (0.0,math.radians(-90.0), 0.0)
    flech.scale = (1.0, 1.0, 1.0)
    flech.select_set(True)
    bpy.ops.object.transform_apply(location=False, rotation=True, scale=False)
    flech.parent = orig
    #new_object.data.transform(new_object.matrix_world)
    #new_object.matrix_world = mathutils.Matrix()
    # flat/smooth
    smooth_data = [True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True, True]
    for i, polygon in enumerate(flech.data.polygons):
        polygon.use_smooth = (True if smooth_data[i] else False)
    # UVs
    uv_xy = [(0.25, 0.4899999797344208), (0.25, 0.25), (0.34184402227401733, 0.4717310667037964), (0.34184402227401733, 0.4717310667037964), (0.25, 0.25), (0.4197056293487549, 0.4197056293487549), (0.4197056293487549, 0.4197056293487549), (0.25, 0.25), (0.4717310667037964, 0.34184402227401733), (0.4717310667037964, 0.34184402227401733), (0.25, 0.25), (0.4899999797344208, 0.2499999850988388), (0.4899999797344208, 0.2499999850988388), (0.25, 0.25), (0.4717310667037964, 0.15815596282482147), (0.4717310667037964, 0.15815596282482147), (0.25, 0.25), (0.4197056293487549, 0.08029438555240631), (0.4197056293487549, 0.08029438555240631), (0.25, 0.25), (0.34184402227401733, 0.02826891839504242), (0.34184402227401733, 0.02826891839504242), (0.25, 0.25), (0.2500000298023224, 0.010000020265579224), (0.2500000298023224, 0.010000020265579224), (0.25, 0.25), (0.15815603733062744, 0.028268888592720032), (0.15815603733062744, 0.028268888592720032), (0.25, 0.25), (0.08029443025588989, 0.08029434084892273), (0.08029443025588989, 0.08029434084892273), (0.25, 0.25), (0.02826891839504242, 0.15815594792366028), (0.02826891839504242, 0.15815594792366028), (0.25, 0.25), (0.010000020265579224, 0.25), (0.010000020265579224, 0.25), (0.25, 0.25), (0.028268948197364807, 0.3418440520763397), (0.028268948197364807, 0.3418440520763397), (0.25, 0.25), (0.08029443025588989, 0.41970565915107727), (0.75, 0.4899999797344208), (0.8418440222740173, 0.4717310667037964), (0.9197056293487549, 0.4197056293487549), (0.9717310667037964, 0.34184402227401733), (0.9900000095367432, 0.2499999850988388), (0.9717310667037964, 0.15815596282482147), (0.9197056293487549, 0.08029438555240631), (0.8418440222740173, 0.02826891839504242), (0.7500000596046448, 0.010000020265579224), (0.6581560373306274, 0.028268888592720032), (0.5802944302558899, 0.08029434084892273), (0.5282689332962036, 0.15815594792366028), (0.5099999904632568, 0.25), (0.5282689332962036, 0.3418440520763397), (0.5802944302558899, 0.41970565915107727), (0.6581560969352722, 0.47173112630844116), (0.08029443025588989, 0.41970565915107727), (0.25, 0.25), (0.15815609693527222, 0.47173112630844116), (0.15815609693527222, 0.47173112630844116), (0.25, 0.25), (0.25, 0.4899999797344208)]
    new_uv = flech.data.uv_layers.new(name='CarteUV')
    for loop in flech.data.loops:
        new_uv.data[loop.index].uv = uv_xy[loop.index]
    # UPDATE
    flech.data.update()
    # MESH
    vertices = [(9.553427325823525e-16, 0.009999999776482582, 2.1855694143368964e-08), (1.0, 0.009999999776482582, -2.1855694143368964e-08), (-1.672752908410402e-10, 0.009238794445991516, -0.003826812608167529), (1.0, 0.009238794445991516, -0.003826856380328536), (-3.090852296327995e-10, 0.007071067579090595, -0.007071045693010092), (1.0, 0.007071067579090595, -0.007071089465171099), (-4.038396006489364e-10, 0.003826834261417389, -0.0092387730255723), (1.0, 0.003826834261417389, -0.009238816797733307), (-4.3711292918580114e-10, -4.3711387287537207e-10, -0.009999978356063366), (1.0, -4.3711387287537207e-10, -0.010000022128224373), (-4.038396006489364e-10, -0.00382683495990932, -0.0092387730255723), (1.0, -0.00382683495990932, -0.009238816797733307), (-3.090852296327995e-10, -0.007071067579090595, -0.007071045693010092), (1.0, -0.007071067579090595, -0.007071089465171099), (-1.67275304718828e-10, -0.009238794445991516, -0.0038268128409981728), (1.0, -0.009238794445991516, -0.0038268566131591797), (8.893403371455213e-16, -0.009999999776482582, 2.034573576281673e-08), (1.0, -0.009999999776482582, -2.33656525239212e-08), (1.6727710883124303e-10, -0.009238796308636665, 0.0038268540520220995), (1.0, -0.009238796308636665, 0.0038268102798610926), (3.0908706150079013e-10, -0.007071069907397032, 0.0070710876025259495), (1.0, -0.007071069907397032, 0.0070710438303649426), (4.0384146027250267e-10, -0.003826835658401251, 0.009238815866410732), (1.0, -0.003826835658401251, 0.009238772094249725), (4.37114816564943e-10, 1.1924880527480752e-10, 0.010000021196901798), (1.0, 1.1924880527480752e-10, 0.009999977424740791), (4.0384146027250267e-10, 0.0038268358912318945, 0.009238815866410732), (1.0, 0.0038268358912318945, 0.009238772094249725), (3.090870337452145e-10, 0.007071069907397032, 0.007071087136864662), (1.0, 0.007071069907397032, 0.007071043364703655), (1.6727699780894056e-10, 0.00923879723995924, 0.0038268514908850193), (1.0, 0.00923879723995924, 0.0038268077187240124)]
    edges = [[0, 2], [3, 1], [0, 1], [3, 2], [2, 4], [5, 3], [5, 4], [4, 6], [7, 5], [7, 6], [6, 8], [9, 7], [9, 8], [8, 10], [11, 9], [11, 10], [10, 12], [13, 11], [13, 12], [12, 14], [15, 13], [15, 14], [14, 16], [17, 15], [17, 16], [16, 18], [19, 17], [19, 18], [18, 20], [21, 19], [21, 20], [20, 22], [23, 21], [23, 22], [22, 24], [25, 23], [25, 24], [24, 26], [27, 25], [27, 26], [26, 28], [29, 27], [29, 28], [28, 30], [31, 29], [31, 30], [30, 0], [1, 31]]
    faces = [[0, 1, 3, 2], [2, 3, 5, 4], [4, 5, 7, 6], [6, 7, 9, 8], [8, 9, 11, 10], [10, 11, 13, 12], [12, 13, 15, 14], [14, 15, 17, 16], [16, 17, 19, 18], [18, 19, 21, 20], [20, 21, 23, 22], [22, 23, 25, 24], [24, 25, 27, 26], [26, 27, 29, 28], [3, 1, 31, 29, 27, 25, 23, 21, 19, 17, 15, 13, 11, 9, 7, 5], [28, 29, 31, 30], [30, 31, 1, 0], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]]
    normem = bpy.data.meshes.new('normem')
    normem.from_pydata(vertices, edges, faces)
    normem.update()
    norme = bpy.data.objects.new(name='norme', object_data=normem)
    source_collection.objects.link(norme)
    # position
    norme.location = (0.0, 0.0, 0.0)
    norme.rotation_euler = (0.0, math.radians(90.0), 0.0)
    norme.scale = (0.800000011920929, 1.0, 1.0)
    norme.select_set(True)
    bpy.ops.object.transform_apply(location=False, rotation=True, scale=True)
    norme.parent = orig
    #new_object.data.transform(new_object.matrix_world)
    #new_object.matrix_world = mathutils.Matrix()
    # flat/smooth
    smooth_data = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
    for i, polygon in enumerate(norme.data.polygons):
        polygon.use_smooth = (True if smooth_data[i] else False)
    # UVs
    uv_xy = [(1.0, 0.5), (1.0, 1.0), (0.9375, 1.0), (0.9375, 0.5), (0.9375, 0.5), (0.9375, 1.0), (0.875, 1.0), (0.875, 0.5), (0.875, 0.5), (0.875, 1.0), (0.8125, 1.0), (0.8125, 0.5), (0.8125, 0.5), (0.8125, 1.0), (0.75, 1.0), (0.75, 0.5), (0.75, 0.5), (0.75, 1.0), (0.6875, 1.0), (0.6875, 0.5), (0.6875, 0.5), (0.6875, 1.0), (0.625, 1.0), (0.625, 0.5), (0.625, 0.5), (0.625, 1.0), (0.5625, 1.0), (0.5625, 0.5), (0.5625, 0.5), (0.5625, 1.0), (0.5, 1.0), (0.5, 0.5), (0.5, 0.5), (0.5, 1.0), (0.4375, 1.0), (0.4375, 0.5), (0.4375, 0.5), (0.4375, 1.0), (0.375, 1.0), (0.375, 0.5), (0.375, 0.5), (0.375, 1.0), (0.3125, 1.0), (0.3125, 0.5), (0.3125, 0.5), (0.3125, 1.0), (0.25, 1.0), (0.25, 0.5), (0.25, 0.5), (0.25, 1.0), (0.1875, 1.0), (0.1875, 0.5), (0.1875, 0.5), (0.1875, 1.0), (0.125, 1.0), (0.125, 0.5), (0.34184402227401733, 0.4717310667037964), (0.25, 0.49000000953674316), (0.15815609693527222, 0.47173112630844116), (0.08029443025588989, 0.41970568895339966), (0.028268933296203613, 0.3418440520763397), (0.01000000536441803, 0.25), (0.028268933296203613, 0.15815594792366028), (0.08029443025588989, 0.08029432594776154), (0.15815603733062744, 0.028268888592720032), (0.2500000298023224, 0.01000000536441803), (0.34184402227401733, 0.028268933296203613), (0.4197056293487549, 0.08029437065124512), (0.4717310667037964, 0.15815596282482147), (0.49000000953674316, 0.2499999850988388), (0.4717310667037964, 0.34184402227401733), (0.4197056293487549, 0.4197056293487549), (0.125, 0.5), (0.125, 1.0), (0.0625, 1.0), (0.0625, 0.5), (0.0625, 0.5), (0.0625, 1.0), (0.0, 1.0), (0.0, 0.5), (0.75, 0.49000000953674316), (0.8418440222740173, 0.4717310667037964), (0.9197056293487549, 0.4197056293487549), (0.9717310667037964, 0.34184402227401733), (0.9900000095367432, 0.2499999850988388), (0.9717310667037964, 0.15815596282482147), (0.9197056293487549, 0.08029437065124512), (0.8418440222740173, 0.028268933296203613), (0.7500000596046448, 0.01000000536441803), (0.6581560373306274, 0.028268888592720032), (0.5802944302558899, 0.08029432594776154), (0.5282689332962036, 0.15815594792366028), (0.5099999904632568, 0.25), (0.5282689332962036, 0.3418440520763397), (0.5802944302558899, 0.41970568895339966), (0.6581560969352722, 0.47173112630844116)]
    new_uv = norme.data.uv_layers.new(name='CarteUV')
    for loop in norme.data.loops:
        new_uv.data[loop.index].uv = uv_xy[loop.index]
    # UPDATE
    norme.data.update()
    fc = flech.constraints.new('TRACK_TO')
    fc.target = orig
    nc = norme.constraints.new('TRACK_TO')
    nc.target = flech
    drv = norme.driver_add('scale',2)
    var = drv.driver.variables.new() 
    var.name='MaVar'
    var.type='LOC_DIFF'
    var.targets[0].id = orig  
    var.targets[1].id = flech
    drv.driver.expression = var.name + '* 1.2'
    orig.location = vec[:]
    return Koll
