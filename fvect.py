import bpy
import math
import mathutils

D = bpy.data




def vect(vec):
    
    # COLLECTION
    Koll = D.collections.new('chvect')
    sc = D.collections.new('vect')
    Koll.children.link(sc)
    D.scenes["Scene"].collection.children.link(Koll)    
    orig = D.objects.new('orig', None)
    sc.objects.link(orig)
    
    # MESH
    vertices = [(0.0, 0.0, 0.0), (0.0, 0.0, 1.0), (0.0, 0.009999999776482582, 0.0), (0.0, 0.009999999776482582, 1.0), (0.001950903213582933, 0.00980785209685564, 0.0), (0.001950903213582933, 0.00980785209685564, 1.0), (0.0038268344942480326, 0.009238794445991516, 0.0), (0.0038268344942480326, 0.009238794445991516, 1.0), (0.005555702373385429, 0.00831469614058733, 0.0), (0.005555702373385429, 0.00831469614058733, 1.0), (0.007071067579090595, 0.007071067579090595, 0.0), (0.007071067579090595, 0.007071067579090595, 1.0), (0.00831469614058733, 0.005555701907724142, 0.0), (0.00831469614058733, 0.005555701907724142, 1.0), (0.009238794445991516, 0.003826834261417389, 0.0), (0.009238794445991516, 0.003826834261417389, 1.0), (0.00980785209685564, 0.0019509034464135766, 0.0), (0.00980785209685564, 0.0019509034464135766, 1.0), (0.009999999776482582, 7.549789682315122e-10, 0.0), (0.009999999776482582, 7.549789682315122e-10, 1.0), (0.009807853028178215, -0.0019509020494297147, 0.0), (0.009807853028178215, -0.0019509020494297147, 1.0), (0.00923879537731409, -0.0038268326316028833, 0.0), (0.00923879537731409, -0.0038268326316028833, 1.0), (0.00831469614058733, -0.005555701907724142, 0.0), (0.00831469614058733, -0.005555701907724142, 1.0), (0.007071067579090595, -0.007071067579090595, 0.0), (0.007071067579090595, -0.007071067579090595, 1.0), (0.005555701907724142, -0.00831469614058733, 0.0), (0.005555701907724142, -0.00831469614058733, 1.0), (0.0038268326316028833, -0.009238796308636665, 0.0), (0.0038268326316028833, -0.009238796308636665, 1.0), (0.0019509007688611746, -0.009807853028178215, 0.0), (0.0019509007688611746, -0.009807853028178215, 1.0), (-3.258413538986815e-09, -0.009999999776482582, 0.0), (-3.258413538986815e-09, -0.009999999776482582, 1.0), (-0.001950907171703875, -0.00980785209685564, 0.0), (-0.001950907171703875, -0.00980785209685564, 1.0), (-0.0038268386851996183, -0.009238792583346367, 0.0), (-0.0038268386851996183, -0.009238792583346367, 1.0), (-0.0055557070299983025, -0.008314692415297031, 0.0), (-0.0055557070299983025, -0.008314692415297031, 1.0), (-0.007071072235703468, -0.007071062922477722, 0.0), (-0.007071072235703468, -0.007071062922477722, 1.0), (-0.008314699865877628, -0.005555696319788694, 0.0), (-0.008314699865877628, -0.005555696319788694, 1.0), (-0.009238798171281815, -0.003826826810836792, 0.0), (-0.009238798171281815, -0.003826826810836792, 1.0), (-0.00980785395950079, -0.0019508945988491178, 0.0), (-0.00980785395950079, -0.0019508945988491178, 1.0), (-0.009999999776482582, 9.655991561885457e-09, 0.0), (-0.009999999776482582, 9.655991561885457e-09, 1.0), (-0.009807850234210491, 0.0019509134581312537, 0.0), (-0.009807850234210491, 0.0019509134581312537, 1.0), (-0.009238790720701218, 0.0038268445059657097, 0.0), (-0.009238790720701218, 0.0038268445059657097, 1.0), (-0.008314689621329308, 0.00555571261793375, 0.0), (-0.008314689621329308, 0.00555571261793375, 1.0), (-0.007071058731526136, 0.007071076426655054, 0.0), (-0.007071058731526136, 0.007071076426655054, 1.0), (-0.005555691197514534, 0.008314703591167927, 0.0), (-0.005555691197514534, 0.008314703591167927, 1.0), (-0.003826820757240057, 0.009238800965249538, 0.0), (-0.003826820757240057, 0.009238800965249538, 1.0), (-0.001950888312421739, 0.009807854890823364, 0.0), (-0.001950888312421739, 0.009807854890823364, 1.0)]
    edges = [[4, 0], [0, 2], [2, 4], [3, 1], [1, 5], [5, 3], [2, 3], [5, 4], [6, 0], [4, 6], [1, 7], [7, 5], [7, 6], [8, 0], [6, 8], [1, 9], [9, 7], [9, 8], [10, 0], [8, 10], [1, 11], [11, 9], [11, 10], [12, 0], [10, 12], [1, 13], [13, 11], [13, 12], [14, 0], [12, 14], [1, 15], [15, 13], [15, 14], [16, 0], [14, 16], [1, 17], [17, 15], [17, 16], [18, 0], [16, 18], [1, 19], [19, 17], [19, 18], [20, 0], [18, 20], [1, 21], [21, 19], [21, 20], [22, 0], [20, 22], [1, 23], [23, 21], [23, 22], [24, 0], [22, 24], [1, 25], [25, 23], [25, 24], [26, 0], [24, 26], [1, 27], [27, 25], [27, 26], [28, 0], [26, 28], [1, 29], [29, 27], [29, 28], [30, 0], [28, 30], [1, 31], [31, 29], [31, 30], [32, 0], [30, 32], [1, 33], [33, 31], [33, 32], [34, 0], [32, 34], [1, 35], [35, 33], [35, 34], [36, 0], [34, 36], [1, 37], [37, 35], [37, 36], [38, 0], [36, 38], [1, 39], [39, 37], [39, 38], [40, 0], [38, 40], [1, 41], [41, 39], [41, 40], [42, 0], [40, 42], [1, 43], [43, 41], [43, 42], [44, 0], [42, 44], [1, 45], [45, 43], [45, 44], [46, 0], [44, 46], [1, 47], [47, 45], [47, 46], [48, 0], [46, 48], [1, 49], [49, 47], [49, 48], [50, 0], [48, 50], [1, 51], [51, 49], [51, 50], [52, 0], [50, 52], [1, 53], [53, 51], [53, 52], [54, 0], [52, 54], [1, 55], [55, 53], [55, 54], [56, 0], [54, 56], [1, 57], [57, 55], [57, 56], [58, 0], [56, 58], [1, 59], [59, 57], [59, 58], [60, 0], [58, 60], [1, 61], [61, 59], [61, 60], [62, 0], [60, 62], [1, 63], [63, 61], [63, 62], [64, 0], [62, 64], [1, 65], [65, 63], [65, 64], [64, 2], [3, 65]]
    faces = [[0, 2, 4], [1, 5, 3], [2, 3, 5, 4], [0, 4, 6], [1, 7, 5], [4, 5, 7, 6], [0, 6, 8], [1, 9, 7], [6, 7, 9, 8], [0, 8, 10], [1, 11, 9], [8, 9, 11, 10], [0, 10, 12], [1, 13, 11], [10, 11, 13, 12], [0, 12, 14], [1, 15, 13], [12, 13, 15, 14], [0, 14, 16], [1, 17, 15], [14, 15, 17, 16], [0, 16, 18], [1, 19, 17], [16, 17, 19, 18], [0, 18, 20], [1, 21, 19], [18, 19, 21, 20], [0, 20, 22], [1, 23, 21], [20, 21, 23, 22], [0, 22, 24], [1, 25, 23], [22, 23, 25, 24], [0, 24, 26], [1, 27, 25], [24, 25, 27, 26], [0, 26, 28], [1, 29, 27], [26, 27, 29, 28], [0, 28, 30], [1, 31, 29], [28, 29, 31, 30], [0, 30, 32], [1, 33, 31], [30, 31, 33, 32], [0, 32, 34], [1, 35, 33], [32, 33, 35, 34], [0, 34, 36], [1, 37, 35], [34, 35, 37, 36], [0, 36, 38], [1, 39, 37], [36, 37, 39, 38], [0, 38, 40], [1, 41, 39], [38, 39, 41, 40], [0, 40, 42], [1, 43, 41], [40, 41, 43, 42], [0, 42, 44], [1, 45, 43], [42, 43, 45, 44], [0, 44, 46], [1, 47, 45], [44, 45, 47, 46], [0, 46, 48], [1, 49, 47], [46, 47, 49, 48], [0, 48, 50], [1, 51, 49], [48, 49, 51, 50], [0, 50, 52], [1, 53, 51], [50, 51, 53, 52], [0, 52, 54], [1, 55, 53], [52, 53, 55, 54], [0, 54, 56], [1, 57, 55], [54, 55, 57, 56], [0, 56, 58], [1, 59, 57], [56, 57, 59, 58], [0, 58, 60], [1, 61, 59], [58, 59, 61, 60], [0, 60, 62], [1, 63, 61], [60, 61, 63, 62], [0, 62, 64], [1, 65, 63], [62, 63, 65, 64], [0, 64, 2], [1, 3, 65], [64, 65, 3, 2]]
    new_mesh = bpy.data.meshes.new('Cylindre')
    new_mesh.from_pydata(vertices, edges, faces)
    new_mesh.update()
    new_object = bpy.data.objects.new(name='Cylindre', object_data=new_mesh)
    sc.objects.link(new_object)
    # position
    new_object.location = (0.0, 0.0, 0.0)
    new_object.rotation_euler = (0.0, 0.0, 0.0)
    new_object.scale = (1.0, 1.0, 1.0)
    # flat/smooth
    smooth_data = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
    for i, polygon in enumerate(new_object.data.polygons):
        polygon.use_smooth = (True if smooth_data[i] else False)
    # UVs
    uv_xy = [(0.75, 0.25), (0.75, 0.49000000953674316), (0.796821653842926, 0.48538845777511597), (0.25, 0.25), (0.2968216836452484, 0.48538845777511597), (0.25, 0.49000000953674316), (1.0, 0.5), (1.0, 1.0), (0.96875, 1.0), (0.96875, 0.5), (0.75, 0.25), (0.796821653842926, 0.48538845777511597), (0.8418440222740173, 0.4717310667037964), (0.25, 0.25), (0.34184402227401733, 0.4717310667037964), (0.2968216836452484, 0.48538845777511597), (0.96875, 0.5), (0.96875, 1.0), (0.9375, 1.0), (0.9375, 0.5), (0.75, 0.25), (0.8418440222740173, 0.4717310667037964), (0.8833368420600891, 0.4495527148246765), (0.25, 0.25), (0.3833368420600891, 0.4495527148246765), (0.34184402227401733, 0.4717310667037964), (0.9375, 0.5), (0.9375, 1.0), (0.90625, 1.0), (0.90625, 0.5), (0.75, 0.25), (0.8833368420600891, 0.4495527148246765), (0.9197056293487549, 0.4197056293487549), (0.25, 0.25), (0.4197056293487549, 0.4197056293487549), (0.3833368420600891, 0.4495527148246765), (0.90625, 0.5), (0.90625, 1.0), (0.875, 1.0), (0.875, 0.5), (0.75, 0.25), (0.9197056293487549, 0.4197056293487549), (0.9495527148246765, 0.3833368420600891), (0.25, 0.25), (0.4495527148246765, 0.3833368420600891), (0.4197056293487549, 0.4197056293487549), (0.875, 0.5), (0.875, 1.0), (0.84375, 1.0), (0.84375, 0.5), (0.75, 0.25), (0.9495527148246765, 0.3833368420600891), (0.9717310667037964, 0.34184402227401733), (0.25, 0.25), (0.4717310667037964, 0.34184402227401733), (0.4495527148246765, 0.3833368420600891), (0.84375, 0.5), (0.84375, 1.0), (0.8125, 1.0), (0.8125, 0.5), (0.75, 0.25), (0.9717310667037964, 0.34184402227401733), (0.985388457775116, 0.2968216836452484), (0.25, 0.25), (0.48538845777511597, 0.2968216836452484), (0.4717310667037964, 0.34184402227401733), (0.8125, 0.5), (0.8125, 1.0), (0.78125, 1.0), (0.78125, 0.5), (0.75, 0.25), (0.985388457775116, 0.2968216836452484), (0.9900000095367432, 0.2500000298023224), (0.25, 0.25), (0.49000000953674316, 0.2500000298023224), (0.48538845777511597, 0.2968216836452484), (0.78125, 0.5), (0.78125, 1.0), (0.75, 1.0), (0.75, 0.5), (0.75, 0.25), (0.9900000095367432, 0.2500000298023224), (0.985388457775116, 0.20317834615707397), (0.25, 0.25), (0.48538845777511597, 0.20317834615707397), (0.49000000953674316, 0.2500000298023224), (0.75, 0.5), (0.75, 1.0), (0.71875, 1.0), (0.71875, 0.5), (0.75, 0.25), (0.985388457775116, 0.20317834615707397), (0.9717310667037964, 0.15815600752830505), (0.25, 0.25), (0.4717310965061188, 0.15815600752830505), (0.48538845777511597, 0.20317834615707397), (0.71875, 0.5), (0.71875, 1.0), (0.6875, 1.0), (0.6875, 0.5), (0.75, 0.25), (0.9717310667037964, 0.15815600752830505), (0.9495527148246765, 0.11666315793991089), (0.25, 0.25), (0.4495527148246765, 0.11666315793991089), (0.4717310965061188, 0.15815600752830505), (0.6875, 0.5), (0.6875, 1.0), (0.65625, 1.0), (0.65625, 0.5), (0.75, 0.25), (0.9495527148246765, 0.11666315793991089), (0.9197056293487549, 0.08029437065124512), (0.25, 0.25), (0.4197056293487549, 0.08029437065124512), (0.4495527148246765, 0.11666315793991089), (0.65625, 0.5), (0.65625, 1.0), (0.625, 1.0), (0.625, 0.5), (0.75, 0.25), (0.9197056293487549, 0.08029437065124512), (0.8833368420600891, 0.050447285175323486), (0.25, 0.25), (0.3833368420600891, 0.050447285175323486), (0.4197056293487549, 0.08029437065124512), (0.625, 0.5), (0.625, 1.0), (0.59375, 1.0), (0.59375, 0.5), (0.75, 0.25), (0.8833368420600891, 0.050447285175323486), (0.8418439626693726, 0.028268888592720032), (0.25, 0.25), (0.34184399247169495, 0.028268888592720032), (0.3833368420600891, 0.050447285175323486), (0.59375, 0.5), (0.59375, 1.0), (0.5625, 1.0), (0.5625, 0.5), (0.75, 0.25), (0.8418439626693726, 0.028268888592720032), (0.7968215942382812, 0.01461152732372284), (0.25, 0.25), (0.29682162404060364, 0.01461152732372284), (0.34184399247169495, 0.028268888592720032), (0.5625, 0.5), (0.5625, 1.0), (0.53125, 1.0), (0.53125, 0.5), (0.75, 0.25), (0.7968215942382812, 0.01461152732372284), (0.7499999403953552, 0.01000000536441803), (0.25, 0.25), (0.24999992549419403, 0.01000000536441803), (0.29682162404060364, 0.01461152732372284), (0.53125, 0.5), (0.53125, 1.0), (0.5, 1.0), (0.5, 0.5), (0.75, 0.25), (0.7499999403953552, 0.01000000536441803), (0.7031782269477844, 0.014611542224884033), (0.25, 0.25), (0.20317822694778442, 0.014611542224884033), (0.24999992549419403, 0.01000000536441803), (0.5, 0.5), (0.5, 1.0), (0.46875, 1.0), (0.46875, 0.5), (0.75, 0.25), (0.7031782269477844, 0.014611542224884033), (0.6581558585166931, 0.028268977999687195), (0.25, 0.25), (0.1581558734178543, 0.028268977999687195), (0.20317822694778442, 0.014611542224884033), (0.46875, 0.5), (0.46875, 1.0), (0.4375, 1.0), (0.4375, 0.5), (0.75, 0.25), (0.6581558585166931, 0.028268977999687195), (0.6166630387306213, 0.05044737458229065), (0.25, 0.25), (0.11666303873062134, 0.05044737458229065), (0.1581558734178543, 0.028268977999687195), (0.4375, 0.5), (0.4375, 1.0), (0.40625, 1.0), (0.40625, 0.5), (0.75, 0.25), (0.6166630387306213, 0.05044737458229065), (0.5802942514419556, 0.08029448986053467), (0.25, 0.25), (0.08029426634311676, 0.08029448986053467), (0.11666303873062134, 0.05044737458229065), (0.40625, 0.5), (0.40625, 1.0), (0.375, 1.0), (0.375, 0.5), (0.75, 0.25), (0.5802942514419556, 0.08029448986053467), (0.5504472255706787, 0.11666329205036163), (0.25, 0.25), (0.05044719576835632, 0.11666329205036163), (0.08029426634311676, 0.08029448986053467), (0.375, 0.5), (0.375, 1.0), (0.34375, 1.0), (0.34375, 0.5), (0.75, 0.25), (0.5504472255706787, 0.11666329205036163), (0.5282688140869141, 0.158156156539917), (0.25, 0.25), (0.02826884388923645, 0.158156156539917), (0.05044719576835632, 0.11666329205036163), (0.34375, 0.5), (0.34375, 1.0), (0.3125, 1.0), (0.3125, 0.5), (0.75, 0.25), (0.5282688140869141, 0.158156156539917), (0.5146114826202393, 0.2031785249710083), (0.25, 0.25), (0.014611512422561646, 0.2031785249710083), (0.02826884388923645, 0.158156156539917), (0.3125, 0.5), (0.3125, 1.0), (0.28125, 1.0), (0.28125, 0.5), (0.75, 0.25), (0.5146114826202393, 0.2031785249710083), (0.5099999904632568, 0.2500002384185791), (0.25, 0.25), (0.01000000536441803, 0.2500002384185791), (0.014611512422561646, 0.2031785249710083), (0.28125, 0.5), (0.28125, 1.0), (0.25, 1.0), (0.25, 0.5), (0.75, 0.25), (0.5099999904632568, 0.2500002384185791), (0.5146116018295288, 0.2968219220638275), (0.25, 0.25), (0.014611601829528809, 0.2968219220638275), (0.01000000536441803, 0.2500002384185791), (0.25, 0.5), (0.25, 1.0), (0.21875, 1.0), (0.21875, 0.5), (0.75, 0.25), (0.5146116018295288, 0.2968219220638275), (0.5282690525054932, 0.34184426069259644), (0.25, 0.25), (0.028269022703170776, 0.34184426069259644), (0.014611601829528809, 0.2968219220638275), (0.21875, 0.5), (0.21875, 1.0), (0.1875, 1.0), (0.1875, 0.5), (0.75, 0.25), (0.5282690525054932, 0.34184426069259644), (0.5504474639892578, 0.3833371102809906), (0.25, 0.25), (0.05044744908809662, 0.3833371102809906), (0.028269022703170776, 0.34184426069259644), (0.1875, 0.5), (0.1875, 1.0), (0.15625, 1.0), (0.15625, 0.5), (0.75, 0.25), (0.5504474639892578, 0.3833371102809906), (0.5802946090698242, 0.4197058379650116), (0.25, 0.25), (0.08029459416866302, 0.4197058379650116), (0.05044744908809662, 0.3833371102809906), (0.15625, 0.5), (0.15625, 1.0), (0.125, 1.0), (0.125, 0.5), (0.75, 0.25), (0.5802946090698242, 0.4197058379650116), (0.61666339635849, 0.44955289363861084), (0.25, 0.25), (0.11666341125965118, 0.44955289363861084), (0.08029459416866302, 0.4197058379650116), (0.125, 0.5), (0.125, 1.0), (0.09375, 1.0), (0.09375, 0.5), (0.75, 0.25), (0.61666339635849, 0.44955289363861084), (0.6581562757492065, 0.4717312157154083), (0.25, 0.25), (0.15815630555152893, 0.4717312157154083), (0.11666341125965118, 0.44955289363861084), (0.09375, 0.5), (0.09375, 1.0), (0.0625, 1.0), (0.0625, 0.5), (0.75, 0.25), (0.6581562757492065, 0.4717312157154083), (0.7031787037849426, 0.48538851737976074), (0.25, 0.25), (0.20317867398262024, 0.48538851737976074), (0.15815630555152893, 0.4717312157154083), (0.0625, 0.5), (0.0625, 1.0), (0.03125, 1.0), (0.03125, 0.5), (0.75, 0.25), (0.7031787037849426, 0.48538851737976074), (0.75, 0.49000000953674316), (0.25, 0.25), (0.25, 0.49000000953674316), (0.20317867398262024, 0.48538851737976074), (0.03125, 0.5), (0.03125, 1.0), (0.0, 1.0), (0.0, 0.5)]
    new_uv = new_object.data.uv_layers.new(name='CarteUV')
    for loop in new_object.data.loops:
        new_uv.data[loop.index].uv = uv_xy[loop.index]
    # UPDATE
    new_object.data.update()
    norme = new_object
    norme.parent = orig
    
    
    # MESH
    vertices = [(0.0, 0.04999999701976776, -0.09999999403953552), (0.009754515253007412, 0.04903925955295563, -0.09999999403953552), (0.019134171307086945, 0.04619397222995758, -0.09999999403953552), (0.027778510004281998, 0.041573476046323776, -0.09999999403953552), (0.0353553369641304, 0.0353553369641304, -0.09999999403953552), (0.041573479771614075, 0.02777850814163685, -0.09999999403953552), (0.04619397222995758, 0.019134169444441795, -0.09999999403953552), (0.04903925955295563, 0.009754517115652561, -0.09999999403953552), (0.04999999701976776, 3.774894619112956e-09, -0.09999999403953552), (0.049039263278245926, -0.009754509665071964, -0.09999999403953552), (0.04619397595524788, -0.0191341619938612, -0.09999999403953552), (0.041573479771614075, -0.02777850814163685, -0.09999999403953552), (0.0353553369641304, -0.0353553369641304, -0.09999999403953552), (0.02777850814163685, -0.041573479771614075, -0.09999999403953552), (0.0191341619938612, -0.04619397968053818, -0.09999999403953552), (0.009754504077136517, -0.049039263278245926, -0.09999999403953552), (-1.6292068139023286e-08, -0.04999999701976776, -0.09999999403953552), (-0.009754535742104053, -0.04903925582766533, -0.09999999403953552), (-0.019134191796183586, -0.046193964779376984, -0.09999999403953552), (-0.027778534218668938, -0.04157346114516258, -0.09999999403953552), (-0.03535535931587219, -0.03535531088709831, -0.09999999403953552), (-0.04157349839806557, -0.02777848020195961, -0.09999999403953552), (-0.04619399085640907, -0.01913413219153881, -0.09999999403953552), (-0.049039267003536224, -0.00975447241216898, -0.09999999403953552), (-0.04999999701976776, 4.827995425671361e-08, -0.09999999403953552), (-0.04903925210237503, 0.00975456740707159, -0.09999999403953552), (-0.04619394987821579, 0.019134221598505974, -0.09999999403953552), (-0.04157344624400139, 0.027778562158346176, -0.09999999403953552), (-0.03535529226064682, 0.03535538166761398, -0.09999999403953552), (-0.02777845412492752, 0.04157351702451706, -0.09999999403953552), (-0.019134102389216423, 0.04619400203227997, -0.09999999403953552), (-0.009754440747201443, 0.04903927445411682, -0.09999999403953552), (0.0, 0.0, 3.725290298461914e-09)]
    edges = [[0, 1], [0, 32], [32, 1], [1, 2], [32, 2], [2, 3], [32, 3], [3, 4], [32, 4], [4, 5], [32, 5], [5, 6], [32, 6], [6, 7], [32, 7], [7, 8], [32, 8], [8, 9], [32, 9], [9, 10], [32, 10], [10, 11], [32, 11], [11, 12], [32, 12], [12, 13], [32, 13], [13, 14], [32, 14], [14, 15], [32, 15], [15, 16], [32, 16], [16, 17], [32, 17], [17, 18], [32, 18], [18, 19], [32, 19], [19, 20], [32, 20], [20, 21], [32, 21], [21, 22], [32, 22], [22, 23], [32, 23], [23, 24], [32, 24], [24, 25], [32, 25], [25, 26], [32, 26], [26, 27], [32, 27], [27, 28], [32, 28], [28, 29], [32, 29], [29, 30], [32, 30], [30, 31], [32, 31], [31, 0]]
    faces = [[0, 32, 1], [1, 32, 2], [2, 32, 3], [3, 32, 4], [4, 32, 5], [5, 32, 6], [6, 32, 7], [7, 32, 8], [8, 32, 9], [9, 32, 10], [10, 32, 11], [11, 32, 12], [12, 32, 13], [13, 32, 14], [14, 32, 15], [15, 32, 16], [16, 32, 17], [17, 32, 18], [18, 32, 19], [19, 32, 20], [20, 32, 21], [21, 32, 22], [22, 32, 23], [23, 32, 24], [24, 32, 25], [25, 32, 26], [26, 32, 27], [27, 32, 28], [28, 32, 29], [29, 32, 30], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31], [30, 32, 31], [31, 32, 0]]
    new_mesh = bpy.data.meshes.new('Cône')
    new_mesh.from_pydata(vertices, edges, faces)
    new_mesh.update()
    new_object = bpy.data.objects.new(name='Cône', object_data=new_mesh)
    sc.objects.link(new_object)
    # position
    new_object.location = (0.0, 0.0, 1.0)
    new_object.rotation_euler = (0.0, 0.0, 0.0)
    new_object.scale = (1.0, 1.0, 1.0)
    # flat/smooth
    smooth_data = [False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False]
    for i, polygon in enumerate(new_object.data.polygons):
        polygon.use_smooth = (True if smooth_data[i] else False)
    # UVs
    uv_xy = [(0.25, 0.49000000953674316), (0.25, 0.25), (0.2968216836452484, 0.48538845777511597), (0.2968216836452484, 0.48538845777511597), (0.25, 0.25), (0.34184402227401733, 0.4717310667037964), (0.34184402227401733, 0.4717310667037964), (0.25, 0.25), (0.3833368420600891, 0.4495527148246765), (0.3833368420600891, 0.4495527148246765), (0.25, 0.25), (0.4197056293487549, 0.4197056293487549), (0.4197056293487549, 0.4197056293487549), (0.25, 0.25), (0.4495527148246765, 0.3833368420600891), (0.4495527148246765, 0.3833368420600891), (0.25, 0.25), (0.4717310667037964, 0.34184402227401733), (0.4717310667037964, 0.34184402227401733), (0.25, 0.25), (0.48538845777511597, 0.2968216836452484), (0.48538845777511597, 0.2968216836452484), (0.25, 0.25), (0.49000000953674316, 0.2500000298023224), (0.49000000953674316, 0.2500000298023224), (0.25, 0.25), (0.48538845777511597, 0.20317834615707397), (0.48538845777511597, 0.20317834615707397), (0.25, 0.25), (0.4717310965061188, 0.15815602242946625), (0.4717310965061188, 0.15815602242946625), (0.25, 0.25), (0.4495527148246765, 0.11666315793991089), (0.4495527148246765, 0.11666315793991089), (0.25, 0.25), (0.4197056293487549, 0.08029437065124512), (0.4197056293487549, 0.08029437065124512), (0.25, 0.25), (0.3833368420600891, 0.050447285175323486), (0.3833368420600891, 0.050447285175323486), (0.25, 0.25), (0.34184396266937256, 0.028268888592720032), (0.34184396266937256, 0.028268888592720032), (0.25, 0.25), (0.29682162404060364, 0.01461152732372284), (0.29682162404060364, 0.01461152732372284), (0.25, 0.25), (0.24999992549419403, 0.01000000536441803), (0.24999992549419403, 0.01000000536441803), (0.25, 0.25), (0.20317822694778442, 0.014611557126045227), (0.20317822694778442, 0.014611557126045227), (0.25, 0.25), (0.1581558734178543, 0.028268963098526), (0.1581558734178543, 0.028268963098526), (0.25, 0.25), (0.11666302382946014, 0.05044737458229065), (0.11666302382946014, 0.05044737458229065), (0.25, 0.25), (0.08029426634311676, 0.08029450476169586), (0.08029426634311676, 0.08029450476169586), (0.25, 0.25), (0.05044719576835632, 0.11666329205036163), (0.05044719576835632, 0.11666329205036163), (0.25, 0.25), (0.028268828988075256, 0.158156156539917), (0.028268828988075256, 0.158156156539917), (0.25, 0.25), (0.014611512422561646, 0.2031785249710083), (0.014611512422561646, 0.2031785249710083), (0.25, 0.25), (0.01000000536441803, 0.2500002384185791), (0.01000000536441803, 0.2500002384185791), (0.25, 0.25), (0.014611586928367615, 0.2968219220638275), (0.014611586928367615, 0.2968219220638275), (0.25, 0.25), (0.02826903760433197, 0.34184426069259644), (0.02826903760433197, 0.34184426069259644), (0.25, 0.25), (0.05044744908809662, 0.3833371102809906), (0.05044744908809662, 0.3833371102809906), (0.25, 0.25), (0.08029459416866302, 0.4197058379650116), (0.08029459416866302, 0.4197058379650116), (0.25, 0.25), (0.11666341125965118, 0.44955289363861084), (0.11666341125965118, 0.44955289363861084), (0.25, 0.25), (0.15815630555152893, 0.4717312157154083), (0.75, 0.49000000953674316), (0.796821653842926, 0.48538845777511597), (0.8418440222740173, 0.4717310667037964), (0.8833368420600891, 0.4495527148246765), (0.9197056293487549, 0.4197056293487549), (0.9495527148246765, 0.3833368420600891), (0.9717310667037964, 0.34184402227401733), (0.985388457775116, 0.2968216836452484), (0.9900000095367432, 0.2500000298023224), (0.985388457775116, 0.20317834615707397), (0.9717310667037964, 0.15815602242946625), (0.9495527148246765, 0.11666315793991089), (0.9197056293487549, 0.08029437065124512), (0.8833368420600891, 0.050447285175323486), (0.8418439626693726, 0.028268888592720032), (0.7968215942382812, 0.01461152732372284), (0.7499999403953552, 0.01000000536441803), (0.7031782269477844, 0.014611557126045227), (0.6581558585166931, 0.028268963098526), (0.6166630387306213, 0.05044737458229065), (0.5802942514419556, 0.08029450476169586), (0.5504472255706787, 0.11666329205036163), (0.5282688140869141, 0.158156156539917), (0.5146114826202393, 0.2031785249710083), (0.5099999904632568, 0.2500002384185791), (0.5146116018295288, 0.2968219220638275), (0.5282690525054932, 0.34184426069259644), (0.5504474639892578, 0.3833371102809906), (0.5802946090698242, 0.4197058379650116), (0.61666339635849, 0.44955289363861084), (0.6581562757492065, 0.4717312157154083), (0.7031787037849426, 0.48538851737976074), (0.15815630555152893, 0.4717312157154083), (0.25, 0.25), (0.20317867398262024, 0.48538851737976074), (0.20317867398262024, 0.48538851737976074), (0.25, 0.25), (0.25, 0.49000000953674316)]
    new_uv = new_object.data.uv_layers.new(name='CarteUV')
    for loop in new_object.data.loops:
        new_uv.data[loop.index].uv = uv_xy[loop.index]
    # UPDATE
    new_object.data.update()
    flech = new_object
    flech.parent = orig

    fc = flech.constraints.new('TRACK_TO')
    fc.target = orig
    nc = norme.constraints.new('TRACK_TO')
    nc.track_axis = 'TRACK_Z'
    nc.target = flech
    drv = norme.driver_add('scale',2)
    var = drv.driver.variables.new() 
    var.name='MaVar'
    var.type='LOC_DIFF'
    var.targets[0].id = orig  
    var.targets[1].id = flech
    drv.driver.expression = var.name  + '* 0.95'
    orig.location = vec[:]
    return Koll


# The last 2 lines are only for testing:
if __name__ == "__main__":
    veco = mathutils.Vector((0.0, 0.0, 0.0))
    veco_n = veco.normalized()
    vect(veco)
    
